{"ast":null,"code":"var _jsxFileName = \"/Users/liuxiaonan/term project/frontend/src/screens/UserListScreen.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport LoadingBox from '../component/LoadingBox';\nimport MessageBox from '../component/MessageBox';\nimport { Store } from '../Store';\nimport { getError } from '../utils';\nimport Button from 'react-bootstrap/Button';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state,\n        loading: true\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        users: action.payload,\n        loading: false\n      };\n\n    case 'FETCH_FAIL':\n      return { ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default function UserListScreen() {\n  _s();\n\n  const navigate = useNavigate();\n  const [{\n    loading,\n    error,\n    users\n  }, dispatch] = useReducer(reducer, {\n    loading: true,\n    error: ''\n  });\n  const {\n    state\n  } = useContext(Store);\n  const {\n    userInfo\n  } = state;\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        dispatch({\n          type: 'FETCH_REQUEST'\n        });\n        const {\n          data\n        } = await axios.get(`/api/users`, {\n          headers: {\n            Authorization: `Bearer ${userInfo.token}`\n          }\n        });\n        dispatch({\n          type: 'FETCH_SUCCESS',\n          payload: data\n        });\n      } catch (err) {\n        dispatch({\n          type: 'FETCH_FAIL',\n          payload: getError(err)\n        });\n      }\n    };\n\n    fetchData();\n  }, [userInfo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Helmet, {\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Users\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Users\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(MessageBox, {\n      variant: \"danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"NAME\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"EMAIL\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"IS ADMIN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ACTIONS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user._id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.isAdmin ? 'YES' : 'NO'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              variant: \"light\",\n              onClick: () => navigate(`/admin/user/${user._id}`),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this)]\n        }, user._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserListScreen, \"eLtzsVob2Hy8FDtjwZyLunl8dA4=\", false, function () {\n  return [useNavigate];\n});\n\n_c = UserListScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserListScreen\");","map":{"version":3,"sources":["/Users/liuxiaonan/term project/frontend/src/screens/UserListScreen.js"],"names":["axios","React","useContext","useEffect","useReducer","Helmet","LoadingBox","MessageBox","Store","getError","Button","useNavigate","reducer","state","action","type","loading","users","payload","error","UserListScreen","navigate","dispatch","userInfo","fetchData","data","get","headers","Authorization","token","err","map","user","_id","name","email","isAdmin"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport React, { useContext, useEffect, useReducer } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport LoadingBox from '../component/LoadingBox';\nimport MessageBox from '../component/MessageBox';\nimport { Store } from '../Store';\nimport { getError } from '../utils';\nimport Button from 'react-bootstrap/Button';\nimport { useNavigate } from 'react-router-dom';\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'FETCH_REQUEST':\n            return { ...state, loading: true };\n        case 'FETCH_SUCCESS':\n            return {\n                ...state,\n                users: action.payload,\n                loading: false,\n            };\n        case 'FETCH_FAIL':\n            return { ...state, loading: false, error: action.payload };\n\n        default:\n            return state;\n    }\n};\nexport default function UserListScreen() {\n    const navigate = useNavigate();\n    const [{ loading, error, users }, dispatch] = useReducer(reducer, {\n        loading: true,\n        error: '',\n    });\n\n    const { state } = useContext(Store);\n    const { userInfo } = state;\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                dispatch({ type: 'FETCH_REQUEST' });\n                const { data } = await axios.get(`/api/users`, {\n                    headers: { Authorization: `Bearer ${userInfo.token}` },\n                });\n                dispatch({ type: 'FETCH_SUCCESS', payload: data });\n            } catch (err) {\n                dispatch({\n                    type: 'FETCH_FAIL',\n                    payload: getError(err),\n                });\n            }\n        };\n        fetchData();\n    }, [userInfo]);\n    return (\n        <div>\n            <Helmet>\n                <title>Users</title>\n            </Helmet>\n            <h1>Users</h1>\n            {loading ? (\n                <LoadingBox></LoadingBox>\n            ) : error ? (\n                <MessageBox variant=\"danger\">{error}</MessageBox>\n            ) : (\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>NAME</th>\n                        <th>EMAIL</th>\n                        <th>IS ADMIN</th>\n                        <th>ACTIONS</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {users.map((user) => (\n                        <tr key={user._id}>\n                            <td>{user._id}</td>\n                            <td>{user.name}</td>\n                            <td>{user.email}</td>\n                            <td>{user.isAdmin ? 'YES' : 'NO'}</td>\n                            <td>\n                                <Button\n                                    type=\"button\"\n                                    variant=\"light\"\n                                    onClick={() => navigate(`/admin/user/${user._id}`)}\n                                >\n                                    Edit\n                                </Button>\n                            </td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </table>\n            )}\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}